class ConcesionDirectsController < ApplicationController
  
  PER_PAGE = 10

  def index
    @concesiondirects = ConcesionDirect.paginate(page: params[:page], per_page: PER_PAGE)
  end

  def show
    @concesiondirect = ConcesionDirect.find(params[:id])
  end

  def new
    # prepare lookups
    @operadores = OperadorRegulado.all.order('nombre')
    @servicios = SciServicio.all.order('descripcion')
    
    # create root parent
    @concesiondirect = ConcesionDirect.new

    #build stack up
    @concesiondirect.build_espectro
    @concesiondirect.espectro.build_titulo_habilitante
    @concesiondirect.espectro.titulo_habilitante.build_asiento
    @espectro = @concesiondirect.espectro
    @titulo_habilitante = @concesiondirect.espectro.titulo_habilitante
    @asiento = @concesiondirect.espectro.titulo_habilitante.asiento

    # build childs
    @concesiondirect.espectro.frecuencia_espectro.new
    @concesiondirect.espectro.frecuencia_espectro.first.zona.new
    @concesiondirect.espectro.titulo_habilitante.servicio_habilitado.new
    @frecuencia_espectro = @concesiondirect.espectro.frecuencia_espectro.first
    @zona = @concesiondirect.espectro.frecuencia_espectro.first.zona.first
    @servicio_habilitado = @concesiondirect.espectro.titulo_habilitante.servicio_habilitado.first
  end

  def edit
    #lookups
    @operadores = OperadorRegulado.all.order('nombre')
    @servicios = SciServicio.all.order('descripcion')

    # parent
    @concesiondirect = ConcesionDirect.find(params[:id])

    # stack up
    @espectro = @concesiondirect.espectro
    @titulo_habilitante = @concesiondirect.espectro.titulo_habilitante
    @asiento = @concesiondirect.espectro.titulo_habilitante.asiento

    # childs
    @concesiondirect.espectro.frecuencia_espectro.new if @concesiondirect.espectro.frecuencia_espectro.first.nil?
    @concesiondirect.espectro.frecuencia_espectro.first.zona.new if @concesiondirect.espectro.frecuencia_espectro.first.zona.first.nil?
    @concesiondirect.espectro.titulo_habilitante.servicio_habilitado.new if @concesiondirect.espectro.titulo_habilitante.servicio_habilitado.nil?

    @frecuencia_espectro = @concesiondirect.espectro.frecuencia_espectro.all 
    @zona = @concesiondirect.espectro.frecuencia_espectro.first.zona.all 
    @servicio_habilitado = @concesiondirect.espectro.titulo_habilitante.servicio_habilitado.all   
  end

  def create
    set_asientos_fields
    create_ancestors_from_hash
    #@concesiondirect = concesiondirect.new(concesiondirect_params)

    if !is_asiento_nil? 
      if @concesiondirect.save
        unless @consecutivo.nil? 
          @consecutivo.save
        end
        flash.now[:success] = "Conseción Directa creada exitosamente"
        redirect_to asientos_path
        #redirect_to concesiondirects_url
      else
        flash.now[:danger] = 'Conseción Directa no creada, hay errores que corregir' 
        render :new
      end
    else
        render :new
    end
  end

  def update
    set_asientos_fields
    create_ancestors_from_hash
    #@concesiondirect = concesiondirect.find(params[:id])
    parametros = params[:concesiondirect][:asiento]

    if !(@concesiondirect.espectro.titulo_habilitante.asiento.tipo_asiento == "AS" and parametros[:tipo_asiento] == "MD" )
      #if @concesiondirect.update_attributes(concesiondirect_params)
      if @concesiondirect.save
        unless @consecutivo.nil? 
          @consecutivo.save
        end
        flash.now[:success] = "Conseción Directa actualizado exitosamente"
        redirect_to asientos_path
      else
        flash.now[:danger] = 'Conseción Directa no modificado, hay errores que corregir' 
        render :edit
      end
    else
      render :edit
    end
  end

  def delete
  end

  def destroy
    concesiondirect.find(params[:id]).destroy
    flash.now[:success] = "Conseción Directa borrada"
    redirect_to concesiondirects_url
  end


  private
    # Use callbacks to share common setup or constraints between actions.
    def set_concesion_direct
      @concesion_direct = ConcesionDirect.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def concesiondirect_params
        unless params[:concesiondirect].empty? 
          params.require(:concesiondirect).permit(:id, espectro_attributes: [:id, :clasificacion_uso_espectro, :titulo_id, [frecuencia_espectro_attributes: [:tipo_frecuencia, :ancho_banda_desde, :ancho_banda_hasta, :unidad_desde, :unidad_hasta, :espectro_id, [zona_attributes: [:tipo_zona, :descripcion_zona, :frecuenciaespectro_id]]]] ,:titulo_type, titulo_habilitante_attributes: [:id, :numero_titulo, :fecha_titulo, :fecha_notificacion, :causal_finalizacion, :espectrable_id, :espectrable_type, [servicio_habilitado_attributes: [:sciservicio_id, :titulo_habilitante_id]] , asiento_attributes: [:id, :acto_id, :acto_type, :_destroy, :num_asiento, :num_asiento_original, :acto_inscribible, :tipo_asiento, :tipo_inscripcion, :numero_resolucion, :nombre_resolucion,:titulo_resolucion, :titulo_resolucion, :fecha_resolucion, :fecha_solicitud, :nombre_operador, :identificacion_operador, :cedula_representante_legal, :nombre_representante_legal, :usuario, :enlace_documento, :num_expediente_sutel, :operadorregulado_id, :vigencia ]]])
        end
    end
    
    def is_asiento_nil?
      #check_stack_for_nil
      #@concesiondirect.espectro.titulo_habilitante.asiento.nil?
      @concesiondirect.espectro.titulo_habilitante.nil?
    end

    def set_asientos_fields
      rn = params[:concesiondirect][:asiento]
      unless rn.nil? or rn.nil?
        if rn[:tipo_asiento].blank? and action_name == 'create'
          @consecutivo = Consecutivo.find_by(as: false)
          @consecutivo.as = true
          rn[:num_asiento_original] = ""
          rn[:num_asiento] = @consecutivo.contador_as
          rn[:tipo_inscripcion] = "nuevo"
          rn[:tipo_asiento] = "AS"
        end

        rn[:acto_inscribible] = "concesiondirect"
        if rn[:nombre_operador].blank? or rn[:identificacion_operador].blank?
          @operador = OperadorRegulado.find(rn[:operadorregulado_id])
          rn[:nombre_operador] = @operador.nombre
          rn[:identificacion_operador] = @operador.identificacion
          rn[:nombre_representante_legal] = @operador.nombre_representante_legal
          rn[:cedula_representante_legal] = @operador.cedula_representante_legal
        end
        rn[:usuario] = current_user.id.to_s + "-" + current_user.email

        if rn[:tipo_asiento] == "MD" and action_name == 'update' and  rn[:num_asiento_original].blank?
          clonar_objetos
        end
      end

    end


    def clonar_objetos
      # clonar el concesiondirect y toda la jerarquía incluyendo los objetos anidados y los objetos ancestros
      # copiar objeto concesiondirect
      neutro = params[:concesiondirect]
      concesiondirect = ConcesionDirect.new
      neutro.each do |key, val|
        unless key.include? "_attributes" 
          unless concesiondirect[key].nil? 
            concesiondirect[key] = val if key != "id"
          end
        end
      end

      # copiar objeto espectro
      espectro = concesiondirect.build_espectro
      neutro = params[:concesiondirect][:espectro_attributes]
      neutro.each do |key, val|
        unless key.include? "_attributes" 
          espectro[key] = val if key != "id"
        end
      end

      # copiar objeto frecuencia_espectro
      frecuencias = params[:concesiondirect][:frecuencia_espectro]      
      unless frecuencias.nil? 
        (0..frecuencias.count).each do |fn|
          frecuencia_espectro = concesiondirect.espectro.frecuencia_espectro.new
          neutro = params[:concesiondirect][:frecuencia_espectro][fn]
          neutro.each do |key, val|
            unless key.include? "_attributes" 
              frecuencia_espectro[key] = val if key != "id"
            end
          end
          # copiar objeto zonas
          zonas = params[:concesiondirect][:frecuencia_espectro][fn][:zona]      
          unless zona.nil? 
            (0..zonas.count).each do |zn|
              zona = concesiondirect.espectro.frecuencia_espectro[fn].zona.new
              neutro = params[:concesiondirect][:frecuencia_espectro][fn][:zona][zn]
              neutro.each do |key, val|
                zona[key] = val if key != "id"
              end
            end
          end
        end
      end

      # copiar objeto titulo habilitante
      titulo_habilitante = concesiondirect.espectro.build_titulo_habilitante
      neutro = params[:concesiondirect][:titulo_habilitante]
      neutro.each do |key, val|
        unless key.include? "_attributes" 
          unless titulo_habilitante[key].nil?
            titulo_habilitante[key] = val if key != "id"
          end
        end
        # copiar objeto servicios_habilitados
        servicios_habilitados = params[:concesiondirect][:servicio_habilitado]
        unless servicios_habilitados.nil? 
          (0..servicios_habilitados.count).each do |sn|
            sci_servicio = concesiondirect.espectro.titulo_habilitante.new
            neutro = params[:concesiondirect][:servicio_habilitado][sn]
            neutro.each do |key, val|
              zona[key] = val if key != "id"
            end
          end
        end
      end

      asiento = concesiondirect.espectro.titulo_habilitante.build_asiento
      neutro = params[:concesiondirect][:asiento]
      #copiar objeto asiento
      neutro.each do |key, val|
        unless asiento[key].nil?
          asiento[key] = val if key != "id"
        end
      end

      #copiar valores al hijo
      #asiento.attributes.each do |key,val|
      #  concesiondirect.asiento[key] = asiento[key] if key != "id"
      #end

      # generar nuevo id
      @consecutivo = Consecutivo.find_by(md: false)
      @consecutivo.md = true
      
      #intercambiar llaves
      obj = ConcesionDirect.find(params[:id])
      concesiondirect.espectro.titulo_habilitante.asiento.num_asiento_original = obj.espectro.titulo_habilitante.asiento.num_asiento
      concesiondirect.espectro.titulo_habilitante.asiento.num_asiento = @consecutivo.contador_md
      concesiondirect.espectro.titulo_habilitante.asiento.tipo_inscripcion = "modificacion"
      concesiondirect.espectro.titulo_habilitante.asiento.acto_type = "TituloHabilitante"

      #grabar objeto
      concesiondirect.save
      @consecutivo.save
      @concesiondirect_modificado = concesiondirect
    end

    def check_stack_for_nil
      #build stack up
      @concesiondirect.build_espectro if @concesiondirect.espectro.nil? 
      @concesiondirect.espectro.build_titulo_habilitante if @concesiondirect.espectro.titulo_habilitante.nil?
      @concesiondirect.espectro.titulo_habilitante.build_asiento if @concesiondirect.espectro.titulo_habilitante.asiento.nil?
      #@concesiondirect.espectro.frecuencia_espectro.new if @concesiondirect.espectro.frecuencia_espectro.first.nil?
      #@concesiondirect.espectro.frecuencia_espectro.first.zona.new if @concesiondirect.espectro.frecuencia_espectro.first.zona.nil?
      #@concesiondirect.espectro.titulo_habilitante.servicio_habilitado.new @concesiondirect.espectro.titulo_habilitante.servicio_habilitado.nil?
    end

    def create_ancestors_from_hash
      @concesiondirect = concesiondirect.new(concesiondirect_params) if action_name == "create"
      @concesiondirect = concesiondirect.find(params[:id]) if action_name != "create"
      check_stack_for_nil

      hash = params[:concesiondirect][:titulo_habilitante]

      # clonar titulo_habilitante
      @concesiondirect.espectro.titulo_habilitante.numero_titulo = hash[:numero_titulo]
      @concesiondirect.espectro.titulo_habilitante.fecha_titulo = hash[:fecha_titulo]
      @concesiondirect.espectro.titulo_habilitante.fecha_notificacion = hash[:fecha_notificacion]
      @concesiondirect.espectro.titulo_habilitante.causal_finalizacion = hash[:causal_finalizacion]
      @concesiondirect.espectro.titulo_habilitante.espectrable_id = hash[:espectrable_id]
      @concesiondirect.espectro.titulo_habilitante.espectrable_type = "Espectro"

      hash = params[:concesiondirect][:asiento]
      @concesiondirect.espectro.titulo_habilitante.asiento.num_asiento = hash[:num_asiento] if action_name == "create"
      @concesiondirect.espectro.titulo_habilitante.asiento.num_asiento_original = hash[:num_asiento_original]
      @concesiondirect.espectro.titulo_habilitante.asiento.acto_inscribible = hash[:acto_inscribible]
      @concesiondirect.espectro.titulo_habilitante.asiento.tipo_asiento = hash[:tipo_asiento]
      @concesiondirect.espectro.titulo_habilitante.asiento.tipo_inscripcion = hash[:tipo_inscripcion] if action_name =="create"
      @concesiondirect.espectro.titulo_habilitante.asiento.numero_resolucion = hash[:numero_resolucion]
      @concesiondirect.espectro.titulo_habilitante.asiento.nombre_resolucion = hash[:nombre_resolucion]
      @concesiondirect.espectro.titulo_habilitante.asiento.titulo_resolucion = hash[:titulo_resolucion]
      @concesiondirect.espectro.titulo_habilitante.asiento.fecha_resolucion = hash[:fecha_resolucion]
      @concesiondirect.espectro.titulo_habilitante.asiento.fecha_solicitud = hash[:fecha_solicitud]
      @concesiondirect.espectro.titulo_habilitante.asiento.nombre_operador = hash[:nombre_operador]
      @concesiondirect.espectro.titulo_habilitante.asiento.identificacion_operador = hash[:identificacion_operador]
      @concesiondirect.espectro.titulo_habilitante.asiento.nombre_representante_legal = hash[:nombre_representante_legal]
      @concesiondirect.espectro.titulo_habilitante.asiento.cedula_representante_legal = hash[:cedula_representante_legal]
      @concesiondirect.espectro.titulo_habilitante.asiento.usuario = hash[:usuario]
      @concesiondirect.espectro.titulo_habilitante.asiento.enlace_documento = hash[:enlace_documento]
      @concesiondirect.espectro.titulo_habilitante.asiento.num_expediente_sutel = hash[:num_expediente_sutel]
      @concesiondirect.espectro.titulo_habilitante.asiento.operadorregulado_id = hash[:operadorregulado_id]
      @concesiondirect.espectro.titulo_habilitante.asiento.vigencia = hash[:vigencia]
      @concesiondirect.espectro.titulo_habilitante.asiento.acto_id = hash[:acto_id]
      @concesiondirect.espectro.titulo_habilitante.asiento.acto_type = "TituloHabilitante"

    end

end
